{"ast":null,"code":"function _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport { CodedError, UnavailabilityError } from '@unimodules/core';\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nimport { FontDisplay } from \"./Font.types\";\nimport { getAssetForSource, loadSingleFontAsync, fontFamilyNeedsScoping, getNativeFontName } from \"./FontLoader\";\nvar loaded = {};\nvar loadPromises = {};\nexport function processFontFamily(fontFamily) {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\"You started loading the font \\\"\" + fontFamily + \"\\\", but used it before it finished loading.\\n\\n- You need to wait for Font.loadAsync to complete before using the font.\\n\\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.\");\n      } else {\n        console.error(\"fontFamily \\\"\" + fontFamily + \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");\n      }\n    }\n    return 'System';\n  }\n  return \"ExpoFont-\" + getNativeFontName(fontFamily);\n}\nexport function isLoaded(fontFamily) {\n  return fontFamily in loaded;\n}\nexport function isLoading(fontFamily) {\n  return fontFamily in loadPromises;\n}\nexport function loadAsync(fontFamilyOrFontMap, source) {\n  var fontMap, names;\n  return _regeneratorRuntime().async(function loadAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        if (!(typeof fontFamilyOrFontMap === 'object')) {\n          _context.next = 8;\n          break;\n        }\n        if (!source) {\n          _context.next = 3;\n          break;\n        }\n        throw new CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided source: \" + source + \". The second argument of `loadAsync()` can only be used with a `string` value as the first argument.\");\n      case 3:\n        fontMap = fontFamilyOrFontMap;\n        names = Object.keys(fontMap);\n        _context.next = 7;\n        return _regeneratorRuntime().awrap(Promise.all(names.map(function (name) {\n          return loadFontInNamespaceAsync(name, fontMap[name]);\n        })));\n      case 7:\n        return _context.abrupt(\"return\");\n      case 8:\n        _context.next = 10;\n        return _regeneratorRuntime().awrap(loadFontInNamespaceAsync(fontFamilyOrFontMap, source));\n      case 10:\n        return _context.abrupt(\"return\", _context.sent);\n      case 11:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction loadFontInNamespaceAsync(fontFamily, source) {\n  var asset;\n  return _regeneratorRuntime().async(function loadFontInNamespaceAsync$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        if (source) {\n          _context3.next = 2;\n          break;\n        }\n        throw new CodedError(\"ERR_FONT_SOURCE\", \"Cannot load null or undefined font source: { \\\"\" + fontFamily + \"\\\": \" + source + \" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\" + fontFamily + \"\\\"\");\n      case 2:\n        if (!loaded[fontFamily]) {\n          _context3.next = 4;\n          break;\n        }\n        return _context3.abrupt(\"return\");\n      case 4:\n        if (!loadPromises[fontFamily]) {\n          _context3.next = 6;\n          break;\n        }\n        return _context3.abrupt(\"return\", loadPromises[fontFamily]);\n      case 6:\n        asset = getAssetForSource(source);\n        loadPromises[fontFamily] = function _callee() {\n          return _regeneratorRuntime().async(function _callee$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return _regeneratorRuntime().awrap(loadSingleFontAsync(fontFamily, asset));\n              case 3:\n                loaded[fontFamily] = true;\n              case 4:\n                _context2.prev = 4;\n                delete loadPromises[fontFamily];\n                return _context2.finish(4);\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, null, null, [[0,, 4, 7]], Promise);\n        }();\n        _context3.next = 10;\n        return _regeneratorRuntime().awrap(loadPromises[fontFamily]);\n      case 10:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function unloadAllAsync() {\n  var _i, _Object$keys, fontFamily;\n  return _regeneratorRuntime().async(function unloadAllAsync$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        if (ExpoFontLoader.unloadAllAsync) {\n          _context4.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n      case 2:\n        if (!Object.keys(loadPromises).length) {\n          _context4.next = 4;\n          break;\n        }\n        throw new CodedError(\"ERR_UNLOAD\", \"Cannot unload fonts while they're still loading: \" + Object.keys(loadPromises).join(', '));\n      case 4:\n        for (_i = 0, _Object$keys = Object.keys(loaded); _i < _Object$keys.length; _i++) {\n          fontFamily = _Object$keys[_i];\n          delete loaded[fontFamily];\n        }\n        _context4.next = 7;\n        return _regeneratorRuntime().awrap(ExpoFontLoader.unloadAllAsync());\n      case 7:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function unloadAsync(fontFamilyOrFontMap, options) {\n  var fontMap, names;\n  return _regeneratorRuntime().async(function unloadAsync$(_context5) {\n    while (1) switch (_context5.prev = _context5.next) {\n      case 0:\n        if (ExpoFontLoader.unloadAsync) {\n          _context5.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('expo-font', 'unloadAsync');\n      case 2:\n        if (!(typeof fontFamilyOrFontMap === 'object')) {\n          _context5.next = 10;\n          break;\n        }\n        if (!options) {\n          _context5.next = 5;\n          break;\n        }\n        throw new CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided options: \" + options + \". The second argument of `unloadAsync()` can only be used with a `string` value as the first argument.\");\n      case 5:\n        fontMap = fontFamilyOrFontMap;\n        names = Object.keys(fontMap);\n        _context5.next = 9;\n        return _regeneratorRuntime().awrap(Promise.all(names.map(function (name) {\n          return unloadFontInNamespaceAsync(name, fontMap[name]);\n        })));\n      case 9:\n        return _context5.abrupt(\"return\");\n      case 10:\n        _context5.next = 12;\n        return _regeneratorRuntime().awrap(unloadFontInNamespaceAsync(fontFamilyOrFontMap, options));\n      case 12:\n        return _context5.abrupt(\"return\", _context5.sent);\n      case 13:\n      case \"end\":\n        return _context5.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction unloadFontInNamespaceAsync(fontFamily, options) {\n  var nativeFontName;\n  return _regeneratorRuntime().async(function unloadFontInNamespaceAsync$(_context6) {\n    while (1) switch (_context6.prev = _context6.next) {\n      case 0:\n        if (loaded[fontFamily]) {\n          _context6.next = 4;\n          break;\n        }\n        return _context6.abrupt(\"return\");\n      case 4:\n        delete loaded[fontFamily];\n      case 5:\n        nativeFontName = getNativeFontName(fontFamily);\n        if (nativeFontName) {\n          _context6.next = 8;\n          break;\n        }\n        throw new CodedError(\"ERR_FONT_FAMILY\", \"Cannot unload an empty name\");\n      case 8:\n        _context6.next = 10;\n        return _regeneratorRuntime().awrap(ExpoFontLoader.unloadAsync(nativeFontName, options));\n      case 10:\n      case \"end\":\n        return _context6.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport { FontDisplay };","map":{"version":3,"names":["CodedError","UnavailabilityError","ExpoFontLoader","FontDisplay","getAssetForSource","loadSingleFontAsync","fontFamilyNeedsScoping","getNativeFontName","loaded","loadPromises","processFontFamily","fontFamily","isLoaded","__DEV__","isLoading","console","error","loadAsync","fontFamilyOrFontMap","source","fontMap","names","_regeneratorRuntime","async","loadAsync$","_context","prev","next","Object","keys","awrap","Promise","all","map","name","loadFontInNamespaceAsync","abrupt","sent","stop","asset","loadFontInNamespaceAsync$","_context3","_callee","_callee$","_context2","finish","unloadAllAsync","_i","_Object$keys","unloadAllAsync$","_context4","length","join","unloadAsync","options","unloadAsync$","_context5","unloadFontInNamespaceAsync","nativeFontName","unloadFontInNamespaceAsync$","_context6"],"sources":["C:\\Users\\ingri\\Documents\\React\\new react example\\expo-firebase-crud\\node_modules\\expo-font\\src\\Font.ts"],"sourcesContent":["import { CodedError, UnavailabilityError } from '@unimodules/core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n * note(brentvatne): at some point we may want to warn if this is called\n * outside of a managed app.\n *\n * @param fontFamily name to process\n * @returns a name processed for use with the [current workflow](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/)\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading.\\n\n- You need to wait for Font.loadAsync to complete before using the font.\\n\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading\n *\n * @param fontFamily the name used to load the `FontResource`.\n * @returns `true` if the the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  return fontFamily in loaded;\n}\n\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded\n *\n * @param fontFamily the name used to load the `FontResource`.\n * @returns `true` if the the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n/**\n * Natively load a font for use with Text elements.\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style) style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n */\nexport async function loadAsync(\n  fontFamilyOrFontMap: string | { [fontFamily: string]: FontSource },\n  source?: FontSource\n): Promise<void> {\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises[fontFamily]) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n/**\n * Unloads all of the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap the names of the custom fonts that will be unloaded.\n * @param source when `fontFamilyOrFontMap` is a string, this should be the font source used to load the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | { [fontFamily: string]: UnloadFontOptions },\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}